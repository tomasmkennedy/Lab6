//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""MouseClick"",
            ""id"": ""e04c8cb6-6cfe-446e-8c04-b175ee6e9321"",
            ""actions"": [
                {
                    ""name"": ""LMB"",
                    ""type"": ""Button"",
                    ""id"": ""c7514d1a-e271-4fb9-aa62-c2e178ce2670"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""9f4092f9-0775-4830-ae0f-8bbd202741f7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""538781ba-405b-4002-aef8-11e88bffae64"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LMB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7f67b36-3422-4208-b087-741628ed54ba"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MouseClick
        m_MouseClick = asset.FindActionMap("MouseClick", throwIfNotFound: true);
        m_MouseClick_LMB = m_MouseClick.FindAction("LMB", throwIfNotFound: true);
        m_MouseClick_MousePosition = m_MouseClick.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MouseClick
    private readonly InputActionMap m_MouseClick;
    private IMouseClickActions m_MouseClickActionsCallbackInterface;
    private readonly InputAction m_MouseClick_LMB;
    private readonly InputAction m_MouseClick_MousePosition;
    public struct MouseClickActions
    {
        private @InputActions m_Wrapper;
        public MouseClickActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LMB => m_Wrapper.m_MouseClick_LMB;
        public InputAction @MousePosition => m_Wrapper.m_MouseClick_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_MouseClick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseClickActions set) { return set.Get(); }
        public void SetCallbacks(IMouseClickActions instance)
        {
            if (m_Wrapper.m_MouseClickActionsCallbackInterface != null)
            {
                @LMB.started -= m_Wrapper.m_MouseClickActionsCallbackInterface.OnLMB;
                @LMB.performed -= m_Wrapper.m_MouseClickActionsCallbackInterface.OnLMB;
                @LMB.canceled -= m_Wrapper.m_MouseClickActionsCallbackInterface.OnLMB;
                @MousePosition.started -= m_Wrapper.m_MouseClickActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_MouseClickActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_MouseClickActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_MouseClickActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LMB.started += instance.OnLMB;
                @LMB.performed += instance.OnLMB;
                @LMB.canceled += instance.OnLMB;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public MouseClickActions @MouseClick => new MouseClickActions(this);
    public interface IMouseClickActions
    {
        void OnLMB(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
